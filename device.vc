#include<stdio.h>
#include<veda_device.h>
#include<time.h>
#include<math.h>

#define G 6.67430e-11 
#define VEDA(err) check(err, __FILE__, __LINE__)

void check(VEDAresult err, const char* file, const int line) {
	if(err != VEDA_SUCCESS) {
		const char *name, *str;
		vedaGetErrorName	(err, &name);
		vedaGetErrorString	(err, &str);
		printf("%s: %s @ %s:%i\n", name, str, file, line);
		exit(1);
	}
}

double getElementAt(int r,int c,double *m,int row,int col){
    return m[r*col+c];
}

void setElementAt(int r,int c,int *m,int row,int col,int val){
    m[r*col+c] = val;
}

void print2DArray(double *arr,int row,int col){
    for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
            printf(" %lf ",getElementAt(i,j,arr,row,col));
        }
        printf("\n");
    }
}

void calcAcc(double *matrix,double *acc_matrix,int n,int pos,int t){
    for(int i=pos;i<pos+n;i++){
        if(matrix[i] == 0.0){
            continue;
        }
        double y = matrix[i+t*2];
        double x = matrix[i+t];

        for(int j=0;j<t;j++){
            if(matrix[j] == 0.0 || i == j){
                continue;
            }
            double dx = x-matrix[j+t];
            double dy = y-matrix[j+t*2];

            double inv_r3 = pow(pow(dx,2)+pow(dy,2),-1.5);

            acc_matrix[i-pos] += (G*(dx*inv_r3)*matrix[j]);
            acc_matrix[(i-pos)+n] += (G*(dy*inv_r3)*matrix[j]);
        }
    }
}

void solve(VEDAdeviceptr particles,int n,int pos,int total_elem){
    double *acc = (double*)malloc(sizeof(double)*n*2);
    double *p;
    VEDA(vedaMemsetD8(acc,0,sizeof(2*n)));
    VEDA(vedaMemPtr((void**)&p,particles));
    calcAcc(p,acc,n,pos,total_elem);
}
